# -*- mode: ruby -*-
# vi: set ft=ruby :

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # All Vagrant configuration is done here. The most common configuration
  # options are documented and commented below. For a complete reference,
  # please see the online documentation at vagrantup.com.

  # Every Vagrant virtual environment requires a box to build off of.
  config.vm.box = "mavericks"

  # The url from where the 'config.vm.box' box will be fetched if it
  # doesn't already exist on the user's system.
  config.vm.box_url = "http://public.synbioz.com/mavericks.box"

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network :forwarded_port, guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network :private_network, ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network :public_network

  # If true, then any SSH connections made will enable agent forwarding.
  # Default value: false
  # config.ssh.forward_agent = true

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # Actually shared folders does'nt work, telling
  # «The HGFS kernel module was not found on the running virtual machine.»
  # config.vm.synced_folder "../../shared", "/vagrant"

  config.vm.provider :vmware_fusion do |vb|
    # Don't boot with headless mode
    vb.gui = true

    # Use VBoxManage to customize the VM. For example to change memory:
    # vb.customize ["modifyvm", :id, "--memory", "1024"]
  end

  config.vm.provision 'shell', path: '../../provisionning/osx-osx/00_configuration.sh'
  config.vm.provision 'shell', path: '../../provisionning/osx-osx/01_brew.sh', privileged: false
  config.vm.provision 'shell', path: '../../provisionning/osx-osx/02_common_tools.sh', privileged: false
  config.vm.provision 'shell', path: '../../provisionning/osx-osx/03_screencasting_tools.sh', privileged: false
  config.vm.provision 'shell', path: '../../provisionning/osx-osx/04_keyboard.sh'
  config.vm.provision 'shell', path: '../../provisionning/osx-osx/05_iterm.sh', privileged: false
  config.vm.provision 'shell', path: '../../provisionning/osx-osx/06_settings.sh', privileged: false
  config.vm.provision 'shell', inline: "chsh -s /bin/zsh vagrant"

  # # I've got a problem with the osx host ; shared folders doesn't work.
  # So I use the upload_path arg as a trick.
  # Be careful because the uploded script will be executed when provisioning.
  # config.vm.provision 'shell', path: '../../bin/osx-osx/screencast', upload_path: '/usr/local/bin/screencast'
end
